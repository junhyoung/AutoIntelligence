//20123425 최준형
// BNF 8-Puzzle
#include<iostream>

using namespace std;
int init[9] = { 2, 8, 3, 1, 6, 4, 7, -1, 5 };
int goal[9] = { 1, 2, 3, 8, -1, 4, 7, 6, 5 };
void main(){
	int* openQ[1000];
	int* closeQ[1000];
	for (int i = 0; i < 1000; i++){
		openQ[i] = new int[9];
		closeQ[i] = new int[9];
	}
	
	int openH = 0;
	int openT = 0;
	int closeT = 0;
	openQ[openT++] = init;
	int count = 0;
	while (1){
		int rightC = 0;
		int curr[9];
		int up[9], down[9], right[9], left[9];
		for (int i = 0; i < 9; i++){
			curr[i] = openQ[openH][i];
			up[i] = down[i] = right[i] = left[i] = curr[i];
			closeQ[closeT][i] = curr[i];
		}
		closeT++;
		openH++;
		int empty;
		for (int i = 0; i < 9; i++){
			if (curr[i] == goal[i])
				rightC++;
			if (curr[i] == -1)
				empty = i;
		}
		cout << "WHILE COUNT : "<< count++<<endl;
		for (int i = 0; i < 9; i++){
			if (curr[i] != -1)
				cout << curr[i] << " ";
			else
				cout << "  ";
			/*if (i % 3 == 2)
				cout << endl;*/
		}
		cout << endl;
		if (rightC == 9)
			break;
		if (empty % 3 != 0){
			int t = left[empty];
			left[empty] = left[empty - 1];
			left[empty - 1] = t;
			for (int i = 0; i < 9; i++)
				openQ[openT][i] = left[i];
			openT++;
		}
		if (empty % 3 != 2){
			int t = right[empty];
			right[empty] = right[empty + 1];
			right[empty + 1] = t;
			for (int i = 0; i < 9; i++)
				openQ[openT][i] = right[i];
			openT++;
		}
		if (empty >= 3){
			int t = up[empty];
			up[empty] = up[empty - 3];
			up[empty - 3] = t;
			for (int i = 0; i < 9; i++)
				openQ[openT][i] = up[i];
			openT++;
		}
		if (empty <= 5){
			int t = down[empty];
			down[empty] = down[empty + 3];
			down[empty + 3] = t;
			for (int i = 0; i < 9; i++)
				openQ[openT][i] = down[i];
			openT++;
		}

		

	}

}
